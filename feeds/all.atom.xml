<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Diogo Silva</title><link href="https://www.diogoaos.com/" rel="alternate"></link><link href="https://www.diogoaos.com/feeds/all.atom.xml" rel="self"></link><id>https://www.diogoaos.com/</id><updated>2021-05-27T00:00:00+01:00</updated><subtitle>Air Force Captain, Computer Engineer, Climber</subtitle><entry><title>Reusable dropdown in Elm with parameterized types — part II</title><link href="https://www.diogoaos.com/blog/reusable-dropdown-in-elm-with-parameterized-types-part-ii/" rel="alternate"></link><published>2021-05-27T00:00:00+01:00</published><updated>2021-05-27T00:00:00+01:00</updated><author><name>Diogo Silva</name></author><id>tag:www.diogoaos.com,2021-05-27:/blog/reusable-dropdown-in-elm-with-parameterized-types-part-ii/</id><summary type="html">&lt;p&gt;Ever needed to have a dropdown on a form? Or on a configuration page? Maybe multiple dropdowns for different ends with different types? elm-ui is great, but it doesn't offer a primitive for dropdowns. In this guide, you'll build a reusable dropdown and, along the way, you'll learn about parametrized …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ever needed to have a dropdown on a form? Or on a configuration page? Maybe multiple dropdowns for different ends with different types? elm-ui is great, but it doesn't offer a primitive for dropdowns. In this guide, you'll build a reusable dropdown and, along the way, you'll learn about parametrized types.&lt;/p&gt;
&lt;p&gt;We'll build on top of work done in the [TODO add link] part I, but if you're familiar with Elm, you should have no trouble jumping right in. The complete code from part I is available in this &lt;a href="https://github.com/diogo-aos/elm-ui-dropdown/releases/tag/partI"&gt;Github&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;In part I we built this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Reusable%20dropdown%20in%20Elm%20with%20parameterized%20types%20%20d1e26d5077354f649483c7b693031587/Kazam_screencast_00005.gif" src="Reusable%20dropdown%20in%20Elm%20with%20parameterized%20types%20%20d1e26d5077354f649483c7b693031587/Kazam_screencast_00005.gif"&gt;&lt;/p&gt;
&lt;p&gt;The way we did it, we can't reuse it for other types. We'll build a simple reusable component with consistent styling that can be reused by calling a function in our views and little added logic.&lt;/p&gt;
&lt;p&gt;Here's a refresher of the view and update logic of what we built in part I:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;status&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Status&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Normal&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;SelectFood&lt;/span&gt;

&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt;
        &lt;span class="nv"&gt;selectedFoodName&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; 
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;Nothing&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;No food selected. Click here to select.&amp;quot;&lt;/span&gt;
                &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
                &lt;span class="nv"&gt;dropdown&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;Normal&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
                        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;dashed&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;padding&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Events&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;selectedFoodName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="kt"&gt;SelectFood&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
                        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;dashed&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;padding&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;below&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;viewFoodList&lt;/span&gt; &lt;span class="nv"&gt;foodList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;selectedFoodName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt;
    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;layout&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;column&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerX&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerY&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You favorite food is:&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dropdown&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;... the best food.&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NoAction&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt;


&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;NoAction&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nv"&gt;model&lt;/span&gt;
        &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;status&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;SelectFood&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For a single dropdown this is fine, but if we had, say, 5 dropdowns, we'd need 5 different Status. That is a lot of boilerplate. We'll create a new Dropdown type to keep the state and value of the dropdown.&lt;/p&gt;
&lt;p&gt;Let's change that. Associated with dropdown is a list of options and a function that will convert an option to a string (to display). We'll also need a message to trigger when an option is selected.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Dropdown&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Normal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Select&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a parameterized type. This dropdown can receive any type (foods, countries, people, cars, whatever you need). See that &lt;code&gt;a&lt;/code&gt; there? That's the type variable.&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;Normal&lt;/code&gt; is in conflict with our previous Status type. Go ahead and delete that entire type. Now, we'll change the model to reference this dropdown type. we'll need a &lt;code&gt;Food&lt;/code&gt; dropdown - the &lt;code&gt;Food&lt;/code&gt; will be the type of the &lt;code&gt;Dropdown&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While we're at it, change the initial model too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;initialModel&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
&lt;span class="nv"&gt;initialModel&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Normal&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also don't need status anymore. &lt;code&gt;Dropdown&lt;/code&gt; will keep its state within the type. &lt;/p&gt;
&lt;p&gt;Next, let's tackle update. Since we don't have &lt;code&gt;Status&lt;/code&gt; anymore, we'll need to start using the new &lt;code&gt;Dropdown&lt;/code&gt; type here too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;NoAction&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nv"&gt;model&lt;/span&gt;

        &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Select&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;ClickedDropdownFood&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Normal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's head over to the &lt;code&gt;view&lt;/code&gt; function now. Go ahead and delete the entire let expression. Delete the &lt;code&gt;viewFood&lt;/code&gt; and &lt;code&gt;viewFoodList&lt;/code&gt; while you're at it. We'll replace these with generic functions. Now, create a &lt;code&gt;dropdownView&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;dropdownView&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Dropdown&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;dropdownView&lt;/span&gt; &lt;span class="nv"&gt;dropdownState&lt;/span&gt; &lt;span class="nv"&gt;options&lt;/span&gt; &lt;span class="nv"&gt;toString&lt;/span&gt; &lt;span class="nv"&gt;openMenuMsg&lt;/span&gt; &lt;span class="nv"&gt;clickedOptionMsg&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt;
        &lt;span class="nv"&gt;selectedName&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;dropdownState&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;Normal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="nv"&gt;someA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;toString&lt;/span&gt; &lt;span class="nv"&gt;someA&lt;/span&gt;
                &lt;span class="nv"&gt;_&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Click to select&amp;quot;&lt;/span&gt;
        &lt;span class="nv"&gt;menu&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
        &lt;span class="nv"&gt;menu&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
            &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dropdownState&lt;/span&gt; &lt;span class="nf"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
                    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
                        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;dashed&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;padding&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Events&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="nv"&gt;openMenuMsg&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;selectedName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kr"&gt;else&lt;/span&gt;
                &lt;span class="kr"&gt;let&lt;/span&gt;
                    &lt;span class="nv"&gt;mouseOverColor&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Color&lt;/span&gt;
                    &lt;span class="nv"&gt;mouseOverColor&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;rgb&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

                    &lt;span class="nv"&gt;backgroundColor&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Color&lt;/span&gt;
                    &lt;span class="nv"&gt;backgroundColor&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;rgb&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

                    &lt;span class="nv"&gt;viewOption&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
                    &lt;span class="nv"&gt;viewOption&lt;/span&gt; &lt;span class="nv"&gt;option&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
                        &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
                            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;fill&lt;/span&gt;
                            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;mouseOver&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Background&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt; &lt;span class="nv"&gt;overColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Background&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt; &lt;span class="nv"&gt;white&lt;/span&gt;
                            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Events&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;clickedOptionMsg&lt;/span&gt; &lt;span class="nv"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                            &lt;span class="p"&gt;]&lt;/span&gt;
                            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nf"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="nv"&gt;toString&lt;/span&gt; &lt;span class="nv"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="nv"&gt;viewOptionList&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
                    &lt;span class="nv"&gt;viewOptionList&lt;/span&gt; &lt;span class="nv"&gt;inputOptions&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
                        &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;column&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;&amp;lt;|&lt;/span&gt;
                            &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;viewOption&lt;/span&gt; &lt;span class="nv"&gt;inputOptions&lt;/span&gt;

                &lt;span class="kr"&gt;in&lt;/span&gt;
                    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
                        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;dashed&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;padding&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;below&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;viewOptionList&lt;/span&gt; &lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;selectedName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt;
        &lt;span class="nv"&gt;menu&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's go step by step. There are 5 arguments to the function. Yes, that's a lot. What do they do?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dropdownState&lt;/code&gt;: gives the state of the dropdown to draw.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt;: gives the list of possible options from which the user can select.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toString&lt;/code&gt;: function to convert the type of the option to a string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;openMenuMsg&lt;/code&gt;: the message that will be triggered when the user clicks the dropdown to select an option.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clickedOptionMsg&lt;/code&gt;: the message that will be triggered when the user selects an option.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll simplify this further, but that will come later. For now, pay attention to the let expression - all the logic resides there. It's pretty much what we had before in the original view. The &lt;code&gt;viewFood&lt;/code&gt; was replaced by &lt;code&gt;viewOption&lt;/code&gt;, which now is parameterized on &lt;code&gt;a&lt;/code&gt;. &lt;em&gt;Idem&lt;/em&gt; for &lt;code&gt;viewFoodList&lt;/code&gt; and &lt;code&gt;viewOptionList&lt;/code&gt;. All the styling is the same. The big different now is the conditions. We now check whether the dropdown state is on &lt;code&gt;Select&lt;/code&gt; (meaning the select menu is open).&lt;/p&gt;
&lt;p&gt;On view, we'll now have the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;layout&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;column&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerX&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerY&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You favorite food is:&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dropdownView&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nv"&gt;foodList&lt;/span&gt; &lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt; &lt;span class="kt"&gt;ClickedDropdownFood&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;... the best food.&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The dropdown state is the &lt;code&gt;favoriteFood&lt;/code&gt; in the model. &lt;code&gt;foodList&lt;/code&gt; is the list of foods defined in [TODO add link] part I. &lt;code&gt;.name&lt;/code&gt; is the function that will be used to convert &lt;code&gt;Food&lt;/code&gt; to &lt;code&gt;String&lt;/code&gt;. Then we have the two messages triggered by the two relevant events.&lt;/p&gt;
&lt;p&gt;And that's it. We now, once again, have a working dropdown. Lets simplify this further. Let's have a single message for each dropdown and keep the option list inside the dropdown state.&lt;/p&gt;
&lt;h1&gt;Further simplification&lt;/h1&gt;
&lt;p&gt;The first modification is to add the option list to the &lt;code&gt;Select&lt;/code&gt; variant of &lt;code&gt;Dropdown&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Dropdown&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Normal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Select&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, we just have to follow the compiler error messages and make some changes in &lt;code&gt;update&lt;/code&gt; and in the &lt;code&gt;view&lt;/code&gt; conditions. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
        &lt;span class="c1"&gt;-- ...&lt;/span&gt;

        &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Select&lt;/span&gt; &lt;span class="nv"&gt;foodList&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;-- ...&lt;/span&gt;



&lt;span class="nv"&gt;dropdownView&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Dropdown&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;dropdownView&lt;/span&gt; &lt;span class="nv"&gt;dropdownState&lt;/span&gt; &lt;span class="nv"&gt;toString&lt;/span&gt; &lt;span class="nv"&gt;openMenuMsg&lt;/span&gt; &lt;span class="nv"&gt;clickedOptionMsg&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt;
        &lt;span class="nv"&gt;selectedName&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;dropdownState&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;Normal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="nv"&gt;someA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;toString&lt;/span&gt; &lt;span class="nv"&gt;someA&lt;/span&gt;
                &lt;span class="nv"&gt;_&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Click to select&amp;quot;&lt;/span&gt;

        &lt;span class="nv"&gt;menu&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
        &lt;span class="nv"&gt;menu&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;dropdownState&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;Select&lt;/span&gt; &lt;span class="nv"&gt;options&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="kr"&gt;let&lt;/span&gt;
                        &lt;span class="nv"&gt;mouseOverColor&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Color&lt;/span&gt;
                        &lt;span class="nv"&gt;mouseOverColor&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;rgb&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

                        &lt;span class="nv"&gt;backgroundColor&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Color&lt;/span&gt;
                        &lt;span class="nv"&gt;backgroundColor&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;rgb&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

                        &lt;span class="nv"&gt;viewOption&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
                        &lt;span class="nv"&gt;viewOption&lt;/span&gt; &lt;span class="nv"&gt;option&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
                            &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
                                &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;fill&lt;/span&gt;
                                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;mouseOver&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Background&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt; &lt;span class="nv"&gt;overColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Background&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt; &lt;span class="nv"&gt;white&lt;/span&gt;
                                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Events&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;clickedOptionMsg&lt;/span&gt; &lt;span class="nv"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="p"&gt;]&lt;/span&gt;
                                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nf"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="nv"&gt;toString&lt;/span&gt; &lt;span class="nv"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                        &lt;span class="nv"&gt;viewOptionList&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
                        &lt;span class="nv"&gt;viewOptionList&lt;/span&gt; &lt;span class="nv"&gt;inputOptions&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
                            &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;column&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;&amp;lt;|&lt;/span&gt;
                                &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;viewOption&lt;/span&gt; &lt;span class="nv"&gt;inputOptions&lt;/span&gt;

                    &lt;span class="kr"&gt;in&lt;/span&gt;
                        &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
                            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;dashed&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;padding&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;below&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;viewOptionList&lt;/span&gt; &lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;selectedName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                
                &lt;span class="nv"&gt;_&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
                        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;dashed&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;padding&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Events&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="nv"&gt;openMenuMsg&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;selectedName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt;
        &lt;span class="nv"&gt;menu&lt;/span&gt;


&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;layout&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;column&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerX&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerY&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You favorite food is:&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dropdownView&lt;/span&gt;  &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt; &lt;span class="kt"&gt;ClickedDropdownFood&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;... the best food.&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The if expression was replaced by a case, since now we needed to get the option list from the dropdown &lt;code&gt;Select&lt;/code&gt; variant.&lt;/p&gt;
&lt;p&gt;Now, let's have a single message for each dropdown. We'll create a new type, specifying the available actions, namely, open the menu and click an option. Afterwards, we'll just need a message for each dropdown. From there, it's just following the compiler errors to refactor the rest of the program.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;DropdownAction&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;OpenList&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;ClickedOption&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;FoodDropdown&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DropdownAction&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;DropdownAction&lt;/code&gt; is also parameterized and we now have a single message for our food dropdown, which contains a &lt;code&gt;DropdownAction&lt;/code&gt; triggered by user activity. We also got rid of the &lt;code&gt;NoAction&lt;/code&gt; message which had been dragging along since the first example of part I.&lt;/p&gt;
&lt;p&gt;Next, we'll change the logic in &lt;code&gt;update.&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;FoodDropdown&lt;/span&gt; &lt;span class="nv"&gt;action&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;action&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;OpenList&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Select&lt;/span&gt; &lt;span class="nv"&gt;foodList&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="kt"&gt;ClickedOption&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Normal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our two previous messages, in essence, are still there, but now they're just variants of the possible dropdown actions, typified in &lt;code&gt;DropdownAction&lt;/code&gt;. This actually makes a lot more sense. If we wanted to add more actions to a dropdown, we wouldn't have to change this message, just the type and the  resulting logic.&lt;/p&gt;
&lt;p&gt;The last bit is the &lt;code&gt;view&lt;/code&gt;. Since there is very little change, I'll only cover the few lines that are refactored. First of all, we now only receive one message (which is actually a function that receives a &lt;code&gt;DropdownAction&lt;/code&gt; and transforms it in a &lt;code&gt;Msg&lt;/code&gt;, since all type variants also double up as functions).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;dropdownView&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Dropdown&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DropdownAction&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;dropdownView&lt;/span&gt; &lt;span class="nv"&gt;dropdownState&lt;/span&gt; &lt;span class="nv"&gt;toString&lt;/span&gt; &lt;span class="nv"&gt;toMsg&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Afterwards, we need to replace the onClick events by the corresponding DropdownAction messages. First, inside &lt;code&gt;viewOption&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Events&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;toMsg&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ClickedOption&lt;/span&gt; &lt;span class="nv"&gt;option&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, inside the Element that renders the default (closed) dropdown.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Events&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;toMsg&lt;/span&gt; &lt;span class="kt"&gt;OpenList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And there you have it. After around 1500 words (counting code, that's cheating you say, yes I know, but I still had to write it), we're exactly where we were in the beginning. Ah... the circle of life.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Reusable%20dropdown%20in%20Elm%20with%20parameterized%20types%20%20d1e26d5077354f649483c7b693031587/Untitled.png" src="Reusable%20dropdown%20in%20Elm%20with%20parameterized%20types%20%20d1e26d5077354f649483c7b693031587/Untitled.png"&gt;&lt;/p&gt;
&lt;p&gt;But now, we can add another dropdown with very little work. Let's add a favorite car dropdown. We create a &lt;code&gt;Car&lt;/code&gt; type, add it to the &lt;code&gt;Model&lt;/code&gt;, initialize it in &lt;code&gt;initialModel&lt;/code&gt;, create a &lt;code&gt;CarDropdown&lt;/code&gt; message, basically copy / paste the logic from the &lt;code&gt;FoodDropdown&lt;/code&gt; and finally add two lines in &lt;code&gt;view&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Dropdown&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;favoriteCar&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Dropdown&lt;/span&gt; &lt;span class="kt"&gt;Car&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Car&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;FoodDropdown&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DropdownAction&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;CarDropdown&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DropdownAction&lt;/span&gt; &lt;span class="kt"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
        &lt;span class="c1"&gt;-- ...&lt;/span&gt;

        &lt;span class="kt"&gt;CarDropdown&lt;/span&gt; &lt;span class="nv"&gt;action&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;action&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;OpenList&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;favoriteCar&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Select&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Car&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;BMW&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Car&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Tesla&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="kt"&gt;ClickedOption&lt;/span&gt; &lt;span class="nv"&gt;car&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;favoriteCar&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Normal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="nv"&gt;car&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;layout&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;column&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerX&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerY&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You favorite food is:&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dropdownView&lt;/span&gt;  &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;FoodDropdown&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;... the best food.&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Favorite car:&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dropdownView&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;favoriteCar&lt;/span&gt; &lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;CarDropdown&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Reusable%20dropdown%20in%20Elm%20with%20parameterized%20types%20%20d1e26d5077354f649483c7b693031587/Untitled%201.png" src="Reusable%20dropdown%20in%20Elm%20with%20parameterized%20types%20%20d1e26d5077354f649483c7b693031587/Untitled%201.png"&gt;&lt;/p&gt;
&lt;p&gt;We're done here! A simple, reusable dropdown. If you've never used parameterized types, take a moment to ponder their potential and simplicity. We can actually simplify this further depending on the needs, e.g. having a function to update a dropdown based on its inputs. One of the advantages is the consistent style of every dropdown (or the lack of it in these examples). You can check the full code in this &lt;a href="https://github.com/diogo-aos/elm-ui-dropdown/releases/tag/partII_done"&gt;Github&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;In part III, we'll use the knowledge and practice of parameterized types to make something a little more complex. We'll build a component that will allow us to choose several options, or none depending on the parameters. It will all be configurable. It will basically be a dropdown on steroids.&lt;/p&gt;</content><category term="blog"></category><category term="Elm"></category><category term="elm-ui"></category><category term="algebraic-datatypes"></category></entry><entry><title>Elm, elm-ui and the building of a dropdown — Part I</title><link href="https://www.diogoaos.com/blog/elm-elm-ui-and-the-building-of-a-dropdown-part-i/" rel="alternate"></link><published>2021-04-27T00:00:00+01:00</published><updated>2021-04-27T00:00:00+01:00</updated><author><name>Diogo Silva</name></author><id>tag:www.diogoaos.com,2021-04-27:/blog/elm-elm-ui-and-the-building-of-a-dropdown-part-i/</id><summary type="html">&lt;p&gt;&lt;img alt="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled.png" src="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled.png"&gt;&lt;/p&gt;
&lt;p&gt;If you're getting into Elm and still handling CSS files, just thrash them. Really. Go ahead and do it, because in Elm, we have the beautiful Elm-UI. You'll get to write design in a language that's actually understandable. However, Elm-UI probably still doesn't have everything you might need. One simple …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled.png" src="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled.png"&gt;&lt;/p&gt;
&lt;p&gt;If you're getting into Elm and still handling CSS files, just thrash them. Really. Go ahead and do it, because in Elm, we have the beautiful Elm-UI. You'll get to write design in a language that's actually understandable. However, Elm-UI probably still doesn't have everything you might need. One simple thing it doesn't have builtin is a dropdown, something you see everywhere.&lt;/p&gt;
&lt;p&gt;Follow along and learn how to build a barebones dropdown using Elm's powerful types. More specifically, you'll master parametrized types!&lt;/p&gt;
&lt;h1&gt;Setup&lt;/h1&gt;
&lt;p&gt;Start a new a Elm project with &lt;code&gt;elm init&lt;/code&gt; and create a &lt;code&gt;Main.elm&lt;/code&gt; file inside the &lt;code&gt;src&lt;/code&gt; folder. You can also follow along using &lt;a href="https://ellie-app.com/new"&gt;Ellie&lt;/a&gt; for this first part (when we start using parametrized types we'll create a new module for a reusable dropdown).&lt;/p&gt;
&lt;p&gt;Install &lt;code&gt;elm-ui&lt;/code&gt; with &lt;code&gt;elm install mdgriffith/elm-ui&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Start with the following barebones structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;module &lt;/span&gt;&lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="nv"&gt;exposing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import &lt;/span&gt;&lt;span class="nc"&gt;Browser&lt;/span&gt;
&lt;span class="kn"&gt;import &lt;/span&gt;&lt;span class="nc"&gt;Html&lt;/span&gt;

&lt;span class="kn"&gt;import &lt;/span&gt;&lt;span class="nc"&gt;Element&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;
&lt;span class="kn"&gt;import &lt;/span&gt;&lt;span class="nc"&gt;Element.Background&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;Background&lt;/span&gt;
&lt;span class="kn"&gt;import &lt;/span&gt;&lt;span class="nc"&gt;Element.Border&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;
&lt;span class="kn"&gt;import &lt;/span&gt;&lt;span class="nc"&gt;Element.Events&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;Events&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nv"&gt;initialModel&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
&lt;span class="nv"&gt;initialModel&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NoAction&lt;/span&gt;


&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;NoAction&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nv"&gt;model&lt;/span&gt;

&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;layout&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;column&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerX&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerY&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You favorite food is:&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;... the best food.&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;main &lt;/span&gt;&lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Program&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="kr"&gt;main &lt;/span&gt;&lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;Browser&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;sandbox&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;init&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;initialModel&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;view&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;update&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;elm make src/main.elm&lt;/code&gt; and go the &lt;code&gt;index.html&lt;/code&gt; file created in the project folder. Right off the start, you get a nice centered layout like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled%201.png" src="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled%201.png"&gt;&lt;/p&gt;
&lt;p&gt;Uau, look at the code to center the column. Isn't life wonderful? I'll never get tired of this.&lt;/p&gt;
&lt;h1&gt;The dropdown&lt;/h1&gt;
&lt;p&gt;Ok, let's focus. What is a dropdown anyway? A dropdown allows the user to choose one option from a predefined list. Let's build a simple dropdown to select our favorite food. We need some options to choose from. We'll create a &lt;code&gt;Food&lt;/code&gt; type that has an &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;foodType&lt;/code&gt;, which can be &lt;code&gt;FastFood&lt;/code&gt; or &lt;code&gt;Regional&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;FoodType&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;FastFood&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Regional&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;foodType&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FoodType&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;foodList&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt;
&lt;span class="nv"&gt;foodList&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hotdog&amp;quot;&lt;/span&gt; &lt;span class="kt"&gt;FastFood&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hamburguer&amp;quot;&lt;/span&gt; &lt;span class="kt"&gt;FastFood&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Taco&amp;quot;&lt;/span&gt; &lt;span class="kt"&gt;FastFood&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Francesinha aka Little French&amp;quot;&lt;/span&gt; &lt;span class="kt"&gt;Regional&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sauerkraut&amp;quot;&lt;/span&gt; &lt;span class="kt"&gt;Regional&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Kimchi&amp;quot;&lt;/span&gt; &lt;span class="kt"&gt;Regional&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add that after the imports. Our model needs to know what is the currently selected favorite food and also if we're currently selecting any food from the dropdown or not.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;status&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Status&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Normal&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;SelectFood&lt;/span&gt;

&lt;span class="nv"&gt;initialModel&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
&lt;span class="nv"&gt;initialModel&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;status&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Normal&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;favoriteFood&lt;/code&gt; might have a &lt;code&gt;Food&lt;/code&gt; that was selected, or not, in which case it will be &lt;code&gt;Nothing&lt;/code&gt; (which is also the starting value, since the user hasn't selected anything yet). &lt;code&gt;Status&lt;/code&gt; just tells us whether we're currently selecting a food from the list or not. When the user clicks the dropdown, status changes to &lt;code&gt;SelectFood&lt;/code&gt;. When the user clicks one of the dropdown options it goes back to Normal (which is also the starting status).&lt;/p&gt;
&lt;p&gt;For now, let's start working on actually designing the dropdown in our &lt;code&gt;view&lt;/code&gt;. Let's create a column with all our possible options written.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt;
        &lt;span class="nv"&gt;selectedFoodName&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; 
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;Nothing&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;No food selected. Click here to select.&amp;quot;&lt;/span&gt;
                &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
        &lt;span class="nv"&gt;dropdown&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; 
            &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;dashed&lt;/span&gt;
                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;padding&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Events&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;selectedFoodName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt;
    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;layout&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;column&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerX&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerY&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You favorite food is:&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dropdown&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;... the best food.&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We just created a placeholder for the name of our favorite food. It already manages the case when there is no food selected. And, if we click on the box, we'll send the &lt;code&gt;ClickedSelectFood&lt;/code&gt; message. We need to create this message and deal with it in the update.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NoAction&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt;


&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;NoAction&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nv"&gt;model&lt;/span&gt;
        &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;status&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;SelectFood&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When we click on the dropdown, a &lt;code&gt;ClickedSelectFood&lt;/code&gt; is sent and our status changes to &lt;code&gt;SelectFood&lt;/code&gt;. Makes sense, right? We'll need to do something with that status, but for now, you'll get something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled%202.png" src="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled%202.png"&gt;&lt;/p&gt;
&lt;p&gt;What we want is for a list of food options to appear &lt;strong&gt;below&lt;/strong&gt; the dropdown, and &lt;strong&gt;over&lt;/strong&gt; the remaining content, without changing the existing layout. Thankfully, &lt;code&gt;elm-ui&lt;/code&gt; has a nice attribute for this, it's called &lt;code&gt;below&lt;/code&gt;. The content to be added will be inside this attribute. We'll create a function to view a list of foods and a function to view a single food and compose them inside our view.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt;
        &lt;span class="nv"&gt;selectedFoodName&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; 
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;Nothing&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;No food selected. Click here to select.&amp;quot;&lt;/span&gt;
                &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
                &lt;span class="nv"&gt;dropdown&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;Normal&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
                        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;dashed&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;padding&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Events&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;selectedFoodName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="kt"&gt;SelectFood&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
                        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Border&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;dashed&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;padding&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;below&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;viewFoodList&lt;/span&gt; &lt;span class="nv"&gt;foodList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;selectedFoodName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt;
    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;layout&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;column&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerX&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;centerY&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You favorite food is:&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dropdown&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;... the best food.&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;viewFoodList&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;viewFoodList&lt;/span&gt; &lt;span class="nv"&gt;foods&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;column&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nf"&gt;&amp;lt;|&lt;/span&gt;
            &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;viewFood&lt;/span&gt; &lt;span class="nv"&gt;foods&lt;/span&gt;

&lt;span class="nv"&gt;overColor&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Color&lt;/span&gt;
&lt;span class="nv"&gt;overColor&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;rgb&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nv"&gt;viewFood&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;viewFood&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;fill&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;mouseOver&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Background&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt; &lt;span class="nv"&gt;overColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's a bit step. The important part is inside the let block in view. If &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;SelectFood&lt;/code&gt;, then we will have a list of &lt;code&gt;Element.text&lt;/code&gt; with the names of the foods attached to the &lt;code&gt;below&lt;/code&gt; attribute. Otherwise, we'll not use that attribute. Also note that the &lt;code&gt;onClick&lt;/code&gt; attribute only appears when status is &lt;code&gt;Normal&lt;/code&gt;. This is because is we kept it on both cases, the event would be triggered when clicked one of the options, because this list lives inside the dropdown element. We don't want that. The &lt;code&gt;ClickedSelectFood&lt;/code&gt; message should only be sent then the status is &lt;code&gt;Normal&lt;/code&gt;. If we're already selecting an option from the food list, it doesn't make sense to send a message that triggers the logic to open the dropdown (it's already opened). Now, when we click the dropdown, we'll get the desired list.&lt;/p&gt;
&lt;p&gt;&lt;img alt="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled%203.png" src="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled%203.png"&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;viewFood&lt;/code&gt;, we already added some nice visual sugar for changing the background color of the option where the mouse is.&lt;/p&gt;
&lt;p&gt;As you can inspect, the list is drawn over the rest of the content. That's why the layout is not changed in the process. But this also means that we're now seeing the content below. We need to fill the background of all options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;white&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Color&lt;/span&gt;
&lt;span class="nv"&gt;white&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;rgb&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nv"&gt;viewFood&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;viewFood&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;fill&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;mouseOver&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Background&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt; &lt;span class="nv"&gt;overColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Background&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt; &lt;span class="nv"&gt;white&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled%204.png" src="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Untitled%204.png"&gt;&lt;/p&gt;
&lt;p&gt;We could style it more, add a little padding, making sure the options have the same width, etc., but let's focus on the logic. There is only one thing missing: implementing the logic for when we actually select an option. When we click an option, a message has to be sent specifying which food was clicked on, save it in the model and revert status back to &lt;code&gt;Normal&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NoAction&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;ClickedDropdownFood&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt;


&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;NoAction&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nv"&gt;model&lt;/span&gt;

        &lt;span class="kt"&gt;ClickedSelectFood&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;status&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;SelectFood&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;ClickedDropdownFood&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;status&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;favoriteFood&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;viewFood&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Food&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;viewFood&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;el&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;fill&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;mouseOver&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Background&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt; &lt;span class="nv"&gt;overColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Background&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt; &lt;span class="nv"&gt;white&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Events&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ClickedDropdownFood&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;food&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We added the &lt;code&gt;ClickedDropdownFood&lt;/code&gt; message, which will be sent when we click one of the foods of the list (see the &lt;code&gt;onClick&lt;/code&gt; event in &lt;code&gt;viewFood&lt;/code&gt;). When &lt;code&gt;update&lt;/code&gt; receives this message, status reverts to &lt;code&gt;Normal&lt;/code&gt; and the new &lt;code&gt;favoriteFood&lt;/code&gt; is the one we clicked on. &lt;code&gt;view&lt;/code&gt; then renders everything as it should. &lt;/p&gt;
&lt;p&gt;&lt;img alt="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Kazam_screencast_00005.gif" src="elm-ui%20dropdown%20blog%20post%20part%20I%2073a7f519f8f74d99884b1d1b993ba7d8/Kazam_screencast_00005.gif"&gt;&lt;/p&gt;
&lt;p&gt;Now you know how to create a simple dropdown. What if you need multiple dropdowns? What if they're selecting different things? That's what we'll cover in part 2, where we'll create a reusable component that will receive any type and display it like we did here.&lt;/p&gt;</content><category term="blog"></category><category term="Elm"></category><category term="elm-ui"></category></entry><entry><title>Bypass firewalls and routers with reverse tunnels</title><link href="https://www.diogoaos.com/blog/bypass-firewalls-and-routers-with-reverse-tunnels/" rel="alternate"></link><published>2021-03-27T00:00:00+00:00</published><updated>2021-03-27T00:00:00+00:00</updated><author><name>Diogo Silva</name></author><id>tag:www.diogoaos.com,2021-03-27:/blog/bypass-firewalls-and-routers-with-reverse-tunnels/</id><summary type="html">&lt;p&gt;If you regularly work with remote, screenless machines, you probably regularly work with SSH too. SSH is great to access a machine, but what if it sits behind a router or firewall and you can't change the rules? That's what this is article is about: reverse tunnels!&lt;/p&gt;
&lt;h1&gt;The typical SSH …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;If you regularly work with remote, screenless machines, you probably regularly work with SSH too. SSH is great to access a machine, but what if it sits behind a router or firewall and you can't change the rules? That's what this is article is about: reverse tunnels!&lt;/p&gt;
&lt;h1&gt;The typical SSH connection&lt;/h1&gt;
&lt;p&gt;The simplest scenario is a direct connection between host A and B. Let's say A wants to SSH into B. You simply type &lt;code&gt;ssh username@B&lt;/code&gt; in a terminal in host A.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssh%20tunnel%20blog%20post%20245fa46ede0c4cf992ac15ed8301a865/Untitled.png" src="https://www.diogoaos.com/blog/ssh_tunnel_blog_post/Untitled.png"&gt;&lt;/p&gt;
&lt;p&gt;Simple enough. This is just a normal SSH connection. Let's get into tunnels.&lt;/p&gt;
&lt;h1&gt;The forward tunnel&lt;/h1&gt;
&lt;p&gt;You use tunnels when you want to forward connections in specific ports. Let's say A wants to access a Jupyter Notebook server running on host B, on port 8888, and we want to be able to access it in host A as if it were running locally, on the same port. We can use a tunnel, that will forward all connections in port 8888 of host A to port 8888 of host B.&lt;/p&gt;
&lt;p&gt;If you go to a browser in host A and access &lt;code&gt;localhost:8888&lt;/code&gt;, sure enough, you'd get the Jupyter Notebook page (that is served on host B).&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssh%20tunnel%20blog%20post%20245fa46ede0c4cf992ac15ed8301a865/Untitled%201.png" src="https://www.diogoaos.com/blog/ssh_tunnel_blog_post/Untitled 1.png"&gt;&lt;/p&gt;
&lt;p&gt;But what if host B sits behind a router or firewall? Well, no problem, you just need to create a port forwarding rule that ensures that a connection to routerB will be forwarded to the SSH port of host B. Let's say port 22 (default SSH port) of routerB is being forwarded to port 22 of host B.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssh%20tunnel%20blog%20post%20245fa46ede0c4cf992ac15ed8301a865/Untitled%202.png" src="https://www.diogoaos.com/blog/ssh_tunnel_blog_post/Untitled 2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssh%20tunnel%20blog%20post%20245fa46ede0c4cf992ac15ed8301a865/Untitled%203.png" src="https://www.diogoaos.com/blog/ssh_tunnel_blog_post/Untitled 3.png"&gt;&lt;/p&gt;
&lt;p&gt;If B sits behind a router, you just need to make sure there is a port forwarding rule from port 22 of routerB to port 22 of B. But what if you can't configure the router or firewall?&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssh%20tunnel%20blog%20post%20245fa46ede0c4cf992ac15ed8301a865/Untitled%204.png" src="https://www.diogoaos.com/blog/ssh_tunnel_blog_post/Untitled 4.png"&gt;&lt;/p&gt;
&lt;h1&gt;The reverse tunnel&lt;/h1&gt;
&lt;p&gt;That's where reverse tunnels enter the picture. You can't access host B with a SSH connection, because B is fenced. There is no way in. But, if you have direct access to it, if you can directly configure it (e.g. manually), then you can still make the connection work by using a &lt;strong&gt;reverse tunnel&lt;/strong&gt;. We still have the same scenario, that is, we want A to be able to access, locally, the Jupyter Notebook running in host B (this could be any service, really).&lt;/p&gt;
&lt;p&gt;Before, we used the &lt;code&gt;-L&lt;/code&gt; option, which forwarded local connection on port 8888 of A to port 8888 of B. We still want to do that, but now the SSH connection will start from host B. If we used &lt;code&gt;-L&lt;/code&gt; again, we'd be forwarding connections on port 8888 of B to port 8888 of A, exactly the opposite of what we want. We need to reverse this, by using &lt;code&gt;-R&lt;/code&gt; option instead. It works exactly as &lt;code&gt;-L&lt;/code&gt;, but in a different direction. &lt;/p&gt;
&lt;p&gt;&lt;img alt="ssh%20tunnel%20blog%20post%20245fa46ede0c4cf992ac15ed8301a865/Untitled%205.png" src="https://www.diogoaos.com/blog/ssh_tunnel_blog_post/Untitled 5.png"&gt;&lt;/p&gt;
&lt;p&gt;Note that the SSH connection is initiated from B to A, but the forwarded connections inside the tunnel are from A to B. Notice how the purple arrow (initial SSH connection) is now going leftwards, but the blue arrow (the forwarding tunnel) is still going towards the right.&lt;/p&gt;
&lt;p&gt;With this, you're done. You can, once again, access the Jupyter Notebook in port 8888 of localhost in host A and it will be served pages from host B (port 8888).&lt;/p&gt;
&lt;h1&gt;SSH into a firewalled host with a reverse tunnel&lt;/h1&gt;
&lt;p&gt;Let's forget about Jupyter Notebooks for now. The more common case is just making a SSH connection into a firewalled host. Using a reverse tunnel, it's easy. Let's break it apart:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B initiates a SSH connection to A: &lt;code&gt;ssh anotherUser@A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This is the base command. We then add the reverse tunnel on top of that, to forward connection on port X of A (let's give it a number, say 12345) to port 22 of B. B actually executes &lt;code&gt;ssh -R 12345:[localhost](http://localhost):22 anotherUser@A&lt;/code&gt;. Now A can access port 22 of localhost of host B if it makes connections on port 12345 on localhost of A (the diagram below clarafies this).&lt;/li&gt;
&lt;li&gt;Then you can just type &lt;code&gt;ssh -p 12345 username@localhost&lt;/code&gt; to have an interactive SSH session in a terminal in host A. This will initiate a SSH connection in port 12345 of localhost, which is forwarded, by the reverse tunnel, to port 22 of host B, creating the desired connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this inceptionesque scenario, we have a SSH connection (blue arrow, initiated by A) inside another SSH connection (big pink arrow, initiated by B).&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssh%20tunnel%20blog%20post%20245fa46ede0c4cf992ac15ed8301a865/Untitled%206.png" src="https://www.diogoaos.com/blog/ssh_tunnel_blog_post/Untitled 6.png"&gt;&lt;/p&gt;
&lt;p&gt;We've now covered the typical ways both normal and reverse tunnels are used. You can use this knowledge to have communication rolling even when you have to deal with pesky firewalls and inaccessible routers.&lt;/p&gt;
&lt;p&gt;A convoluted, but common setup, is having a router sitting between A and the internet (check the diagram below). Let's say we have a routerA that forwards port 6789 to port 22 (SSH's default port) of host A. The goal is still the same: have host A access the firewalled host B. This is not really that much more complex, but we have to "divide and conquer" the problem, or layer it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Host B must create a SSH connection to host A. This was done with &lt;code&gt;ssh anotherUser@A&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;But now, A is behind routerA and port 6789 of routerA is forwarding to port 22 of A, so we have to specify that port in the original SSH connection: &lt;code&gt;ssh anotherUser@routerA -p 6789&lt;/code&gt;. Since port 6789 of routerA is forwarding to port 22 of A, we get our connection.&lt;/li&gt;
&lt;li&gt;B must create a reverse tunnel. This part we already covered: &lt;code&gt;ssh -R 12345:localhost:22 anotherUser@routerA -p 6789&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally, host A connects to host B as before, &lt;code&gt;ssh -p 12345 username@localhost&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="ssh%20tunnel%20blog%20post%20245fa46ede0c4cf992ac15ed8301a865/Untitled%207.png" src="https://www.diogoaos.com/blog/ssh_tunnel_blog_post/Untitled 7.png"&gt;&lt;/p&gt;
&lt;p&gt;What if we also can't configure routerA? That means no port forwarding is in place and neither A nor B can receive connections! The only way out of that one is to make a blood sacrifice. Chickens 🐔 usually do it. Goats 🐐 if you want to get fancy. Or, perhaps, with a third host, with tunnels initiated in A and B... That's homework material!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://unix.stackexchange.com/questions/46235/how-does-reverse-ssh-tunneling-work"&gt;https://unix.stackexchange.com/questions/46235/how-does-reverse-ssh-tunneling-work&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You want to SSH into a machine that sits behind a firewall. You can physically access the machine, but you can't configure the firewall, which means there is no port forwarding to the firewalled host.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1Aepwzvv6DC4dmMFgYTE-rEFOKj6Fy4Jz/view?usp=drivesdk"&gt;reverse_tunnel.pptx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="ssh%20tunnel%20blog%20post%20245fa46ede0c4cf992ac15ed8301a865/reverse_tunnel.odp"&gt;reverse_tunnel.odp&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-R &lt;span class="o"&gt;[&lt;/span&gt;bind_address:&lt;span class="o"&gt;]&lt;/span&gt;port:host:hostport
-R &lt;span class="o"&gt;[&lt;/span&gt;bind_address:&lt;span class="o"&gt;]&lt;/span&gt;port:local_socket
-R remote_socket:host:hostport
-R remote_socket:local_socket
-R &lt;span class="o"&gt;[&lt;/span&gt;bind_address:&lt;span class="o"&gt;]&lt;/span&gt;port
Specifies that connections to the given TCP port or Unix socket on the remote &lt;span class="o"&gt;(&lt;/span&gt;server&lt;span class="o"&gt;)&lt;/span&gt; host are to be forwarded to the &lt;span class="nb"&gt;local&lt;/span&gt; side.
This works by allocating a socket to listen to either a TCP port or to a Unix socket on the remote side. Whenever a connection is
made to this port or Unix socket, the connection is forwarded over the secure channel, and a connection is made from the &lt;span class="nb"&gt;local&lt;/span&gt; ma‐
chine to either an explicit destination specified by host port hostport, or local_socket, or, &lt;span class="k"&gt;if&lt;/span&gt; no explicit destination was speci‐
fied, ssh will act as a SOCKS &lt;span class="m"&gt;4&lt;/span&gt;/5 proxy and forward connections to the destinations requested by the remote SOCKS client.
Port forwardings can also be specified &lt;span class="k"&gt;in&lt;/span&gt; the configuration file. Privileged ports can be forwarded only when logging &lt;span class="k"&gt;in&lt;/span&gt; as root on
the remote machine. IPv6 addresses can be specified by enclosing the address &lt;span class="k"&gt;in&lt;/span&gt; square brackets.
By default, TCP listening sockets on the server will be bound to the loopback interface only. This may be overridden by specifying
a bind_address. An empty bind_address, or the address ‘*’, indicates that the remote socket should listen on all interfaces. Spec‐
ifying a remote bind_address will only succeed &lt;span class="k"&gt;if&lt;/span&gt; the server&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s GatewayPorts option is enabled &lt;span class="o"&gt;(&lt;/span&gt;see sshd_config&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;.
If the port argument is ‘0’, the listen port will be dynamically allocated on the server and reported to the client at run time.
When used together with -O forward the allocated port will be printed to the standard output.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-L &lt;span class="o"&gt;[&lt;/span&gt;bind_address:&lt;span class="o"&gt;]&lt;/span&gt;port:host:hostport
     -L &lt;span class="o"&gt;[&lt;/span&gt;bind_address:&lt;span class="o"&gt;]&lt;/span&gt;port:remote_socket
     -L local_socket:host:hostport
     -L local_socket:remote_socket
             Specifies that connections to the given TCP port or Unix socket on the &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;client&lt;span class="o"&gt;)&lt;/span&gt; host are to be forwarded to the given host and
             port, or Unix socket, on the remote side.  This works by allocating a socket to listen to either a TCP port on the &lt;span class="nb"&gt;local&lt;/span&gt; side, op‐
             tionally bound to the specified bind_address, or to a Unix socket.  Whenever a connection is made to the &lt;span class="nb"&gt;local&lt;/span&gt; port or socket, the
             connection is forwarded over the secure channel, and a connection is made to either host port hostport, or the Unix socket
             remote_socket, from the remote machine.

             Port forwardings can also be specified &lt;span class="k"&gt;in&lt;/span&gt; the configuration file.  Only the superuser can forward privileged ports.  IPv6 addresses
             can be specified by enclosing the address &lt;span class="k"&gt;in&lt;/span&gt; square brackets.

             By default, the &lt;span class="nb"&gt;local&lt;/span&gt; port is bound &lt;span class="k"&gt;in&lt;/span&gt; accordance with the GatewayPorts setting.  However, an explicit bind_address may be used to
             &lt;span class="nb"&gt;bind&lt;/span&gt; the connection to a specific address.  The bind_address of “localhost” indicates that the listening port be bound &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; use
             only, &lt;span class="k"&gt;while&lt;/span&gt; an empty address or ‘*’ indicates that the port should be available from all interfaces.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category><category term="ssh"></category><category term="tunnel"></category></entry><entry><title>How to get unique values in an Elm list?</title><link href="https://www.diogoaos.com/blog/how-to-get-unique-values-in-an-elm-list/" rel="alternate"></link><published>2021-01-28T00:00:00+00:00</published><updated>2021-01-28T00:00:00+00:00</updated><author><name>Diogo Silva</name></author><id>tag:www.diogoaos.com,2021-01-28:/blog/how-to-get-unique-values-in-an-elm-list/</id><summary type="html">&lt;p&gt;You do it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;unique&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;
&lt;span class="nv"&gt;unique&lt;/span&gt; &lt;span class="nv"&gt;l&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt;
        &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;
        &lt;span class="nv"&gt;intUnique&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;member&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;
               &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nf"&gt;::&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt;
        &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;foldr&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="nv"&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you go. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Oh, still here? Let’s see what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You do it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;unique&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;
&lt;span class="nv"&gt;unique&lt;/span&gt; &lt;span class="nv"&gt;l&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt;
        &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;
        &lt;span class="nv"&gt;intUnique&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;member&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;
               &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nf"&gt;::&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt;
        &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;foldr&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="nv"&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you go. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Oh, still here? Let’s see what this is doing then.&lt;/p&gt;
&lt;p&gt;So, you have a list in Elm and you want to get the unique values in it. And there is no way to write a simple imperative loop to iterate over the list. List.fold to the rescue. We have 2 folds we can use: &lt;em&gt;foldl&lt;/em&gt; (fold left) and &lt;em&gt;foldr&lt;/em&gt; (fold… you can figure it out). The left and right refer to the associativity of the operation.&lt;/p&gt;
&lt;p&gt;Say you have the list [2, 2, 3, 4]. If you fold the list, it means you’ll go over the list pairing 2 items and applying some function, e.g. folding this list with the + operation would get us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="images/fold_diagram.png" src="https://www.diogoaos.com/blog/0001_elm_get_unique_values/fold_diagram.png"&gt;
&lt;img alt="images/fold_diagram.png" src="{filename}/fold_diagram.png"&gt;&lt;/p&gt;
&lt;p&gt;This is right associativity, by the way, so I did a foldr. We can see more 
clearly what’s going on looking at the diagram. There, our function &lt;em&gt;f&lt;/em&gt; is the &lt;em&gt;+&lt;/em&gt; operation and our seed is &lt;em&gt;0&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The foldl would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Elm we have &lt;em&gt;List.foldl&lt;/em&gt; and &lt;em&gt;List.foldr&lt;/em&gt;.
 In addition to the function to apply and the list, we also have to 
supply a seed value to apply to the first element of the list, e.g. if 
our seed was 0, we’d have a foldr like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This
 is how folding works. We can use it for more advanced data structure 
traversal, but we’ll only use it to find unique values here. We will 
start with an empty list (our seed) and check if the elements in the 
original list are n this new list. If they are, we do nothing. If they 
are not, we add them to that list (or rather we create a new list with 
the elements of that list plus the new element, since there’s is no 
mutability in Elm land).&lt;/p&gt;
&lt;p&gt;Let’s define our function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;
&lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
 &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;member&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
 &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;
 &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nf"&gt;::&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This function receives a list element and a list. If the element is a member of that list, it returns the list. If it’s not, it returns a new list containing all the elements of the received list plus the received 
element. Then we use the fold with this function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;someList&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;foldr&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="nv"&gt;someList&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here’s what’s happening&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See, we’re folding from the right. What if we folded from the left?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s less clear that we’re folding from the left because the list element is always the left operand of the function. This caused the list to look inverted in the expression. As it turns out, our final result also inverts the original list, with the duplicates removed. This is because our function &lt;em&gt;incUnique&lt;/em&gt; adds new elements to the front of the list. If it added to the back of the list, &lt;em&gt;foldr&lt;/em&gt; would invert the list and &lt;em&gt;foldl&lt;/em&gt; would preserve order. Go back to the diagram above and imagine what it would like for a left fold.&lt;/p&gt;
&lt;p&gt;Putting it all together:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;unique&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;
&lt;span class="nv"&gt;unique&lt;/span&gt; &lt;span class="nv"&gt;l&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt;
        &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;
        &lt;span class="nv"&gt;intUnique&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
        &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;member&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
            &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;
            &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;elem&lt;/span&gt; &lt;span class="nf"&gt;::&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;
     &lt;span class="kr"&gt;in&lt;/span&gt;
    &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;foldr&lt;/span&gt; &lt;span class="nv"&gt;incUnique&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="nv"&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="0001_elm_get_unique_values"></category><category term="Elm"></category></entry></feed>